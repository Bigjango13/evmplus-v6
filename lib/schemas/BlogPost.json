{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Draft.Model.Constants.DraftBlockType": {
            "description": "The list of default valid block types.",
            "enum": [
                "atomic",
                "blockquote",
                "code-block",
                "header-five",
                "header-four",
                "header-one",
                "header-six",
                "header-three",
                "header-two",
                "ordered-list-item",
                "paragraph",
                "unordered-list-item",
                "unstyled"
            ],
            "type": "string"
        },
        "Draft.Model.Constants.DraftEntityMutability": {
            "description": "Possible \"mutability\" options for an entity. This refers to the behavior\nthat should occur when inserting or removing characters in a text range\nwith an entity applied to it.\n\n`MUTABLE`:\n   The text range can be modified freely. Generally used in cases where\n   the text content and the entity do not necessarily have a direct\n   relationship. For instance, the text and URI for a link may be completely\n   different. The user is allowed to edit the text as needed, and the entity\n   is preserved and applied to any characters added within the range.\n\n`IMMUTABLE`:\n   Not to be confused with immutable data structures used to represent the\n   state of the editor. Immutable entity ranges cannot be modified in any\n   way. Adding characters within the range will remove the entity from the\n   entire range. Deleting characters will delete the entire range. Example:\n   Facebook Page mentions.\n\n`SEGMENTED`:\n   Segmented entities allow the removal of partial ranges of text, as\n   separated by a delimiter. Adding characters wihin the range will remove\n   the entity from the entire range. Deleting characters within a segmented\n   entity will delete only the segments affected by the deletion. Example:\n   Facebook User mentions.",
            "enum": [
                "IMMUTABLE",
                "MUTABLE",
                "SEGMENTED"
            ],
            "type": "string"
        },
        "Draft.Model.Constants.DraftInlineStyleType": {
            "description": "Valid inline styles.",
            "enum": [
                "BOLD",
                "CODE",
                "ITALIC",
                "STRIKETHROUGH",
                "UNDERLINE"
            ],
            "type": "string"
        },
        "Draft.RawDraftContentBlock": {
            "description": "A plain object representation of a ContentBlock, with all style and entity\nattribution repackaged as range objects.",
            "properties": {
                "data": {
                    "$ref": "#/definitions/Object"
                },
                "depth": {
                    "type": "number"
                },
                "entityRanges": {
                    "items": {
                        "$ref": "#/definitions/Draft.RawDraftEntityRange"
                    },
                    "type": "array"
                },
                "inlineStyleRanges": {
                    "items": {
                        "$ref": "#/definitions/Draft.RawDraftInlineStyleRange"
                    },
                    "type": "array"
                },
                "key": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/Draft.Model.Constants.DraftBlockType"
                }
            },
            "required": [
                "depth",
                "entityRanges",
                "inlineStyleRanges",
                "key",
                "text",
                "type"
            ],
            "type": "object"
        },
        "Draft.RawDraftContentState": {
            "description": "A type that represents a composed document as vanilla JavaScript objects,\nwith all styles and entities represented as ranges. Corresponding entity\nobjects are packaged as objects as well.\n\nThis object is especially useful when sending the document state to the\nserver for storage, as its representation is more concise than our\nimmutable objects.",
            "properties": {
                "blocks": {
                    "items": {
                        "$ref": "#/definitions/Draft.RawDraftContentBlock"
                    },
                    "type": "array"
                },
                "entityMap": {
                    "additionalProperties": {
                        "$ref": "#/definitions/Draft.RawDraftEntity"
                    },
                    "type": "object"
                }
            },
            "required": [
                "blocks",
                "entityMap"
            ],
            "type": "object"
        },
        "Draft.RawDraftEntity": {
            "description": "A plain object representation of an EntityInstance.",
            "properties": {
                "data": {
                    "additionalProperties": {
                    },
                    "type": "object"
                },
                "mutability": {
                    "$ref": "#/definitions/Draft.Model.Constants.DraftEntityMutability"
                },
                "type": {
                    "description": "Possible entity types.",
                    "type": "string"
                }
            },
            "required": [
                "data",
                "mutability",
                "type"
            ],
            "type": "object"
        },
        "Draft.RawDraftEntityRange": {
            "description": "A plain object representation of an entity attribution.\n\nThe `key` value corresponds to the key of the entity in the `entityMap` of\na `ComposedText` object, not for use with `DraftEntity.get()`.",
            "properties": {
                "key": {
                    "type": "number"
                },
                "length": {
                    "type": "number"
                },
                "offset": {
                    "type": "number"
                }
            },
            "required": [
                "key",
                "length",
                "offset"
            ],
            "type": "object"
        },
        "Draft.RawDraftInlineStyleRange": {
            "description": "A plain object representation of an inline style range.",
            "properties": {
                "length": {
                    "type": "number"
                },
                "offset": {
                    "type": "number"
                },
                "style": {
                    "$ref": "#/definitions/Draft.Model.Constants.DraftInlineStyleType"
                }
            },
            "required": [
                "length",
                "offset",
                "style"
            ],
            "type": "object"
        },
        "Function": {
            "description": "Creates a new function.",
            "properties": {
                "arguments": {
                },
                "caller": {
                    "$ref": "#/definitions/Function"
                },
                "length": {
                    "type": "number"
                },
                "prototype": {
                }
            },
            "required": [
                "arguments",
                "caller",
                "length",
                "prototype"
            ],
            "type": "object"
        },
        "Object": {
            "description": "Provides functionality common to all JavaScript objects.",
            "properties": {
                "constructor": {
                    "$ref": "#/definitions/Function",
                    "description": "The initial value of Object.prototype.constructor is the standard built-in Object constructor."
                }
            },
            "required": [
                "constructor"
            ],
            "type": "object"
        }
    },
    "properties": {
        "_id": {
            "type": "string"
        },
        "accountID": {
            "description": "The ID of the account the folder belongs to",
            "type": "string"
        },
        "authorid": {
            "type": "number"
        },
        "content": {
            "$ref": "#/definitions/Draft.RawDraftContentState"
        },
        "fileIDs": {
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "id": {
            "type": "number"
        },
        "posted": {
            "type": "number"
        },
        "title": {
            "type": "string"
        }
    },
    "required": [
        "accountID",
        "authorid",
        "content",
        "fileIDs",
        "id",
        "posted",
        "title"
    ],
    "type": "object"
}

